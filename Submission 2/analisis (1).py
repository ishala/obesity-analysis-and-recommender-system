# -*- coding: utf-8 -*-
"""analisis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FESL9pHEnXOg4Nsrulv1mYJ_GnnEKnRt

# Import Library
"""

# Olah Data
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import re
import random

# Pengembangan Model
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import tensorflow as tf
from tensorflow.keras import layers
from tensorflow.keras.models import Model
from tensorflow.keras.callbacks import EarlyStopping

"""# Data Loading"""

# Path
allDietsDfPath = 'data/All_Diets.csv'
allUsersDfPath = 'data/ObesityDataSet_cleaned_and_data_sinthetic.csv'

# Dataset
allDietsDf = pd.read_csv(allDietsDfPath)
allUsersDf = pd.read_csv(allUsersDfPath)

allDietsDf.sample(10)

allUsersDf.head()

"""# Data Assessing"""

# Cek shape dataset tipe diet
allDietsDf.shape

# Cek shape dataset users
allUsersDf.shape

"""## Informasi Umum

### Dataset Diet
"""

allDietsDf.info()

"""### Dataset *Users*"""

allUsersDf.info()

"""## Cek Data Null

### Dataset Diet
"""

allDietsDf.isna().sum()

"""### Dataset *Users*"""

allUsersDf.isna().sum()

"""## Cek Data Duplikat

### Dataset Diet
"""

allDietsDf.duplicated().sum()

"""### Dataset *Users*"""

allUsersDf.duplicated().sum()

"""## Nilai Statistik Dataset

### Dataset Diet
"""

allDietsDf.describe()

"""### Dataset *Users*"""

allUsersDf.describe()

"""Dari hasil analisa pada tahap **Data Assessing** kesimpulannya adalah:
1. Dataset Diet
   - Tidak terdapat kesalahan tipe data kolom
   - Tidak terdapat nilai *null*
   - Terdapat **5** data duplikat

Catatan:
Terdapat nilai 0 pada kolom **Protein(g)**, dan **Fat(g)** dari hasil eksekusi perintah *describe* yang perlu ditinjau ulang pada tahap **EDA**.

2. Dataset *Users*
   - Terdapat kesalahan tipe data pada kolom **Weight**, seharusnya *float* bukan *integer*
   - Tidak terdapat nilai *null*
   - Tidak terdapat data duplikat

# Data Cleaning

## Hapus Data Duplikat Dataset Diet

Penghapusan data duplikat pada dataset diet dilakukan secara langsung karena jumlahnya yang tergolong kecil dibanding total banyak data yang ada.
"""

allDietsDf.shape

allDietsDf.drop_duplicates(inplace=True)

allDietsDf.shape

"""Saat ini pada dataset diet sudah tidak ada data duplikat

## Ubah Isi Nilai Kolom Resep Masakan Menjadi Kapital di Awal
"""

allDietsDf['Recipe_name'] = allDietsDf['Recipe_name'].apply(lambda x: x.title())

"""## Ubah Tipe Data Kolom Weight Dataset *Users*"""

allUsersDf['Weight'] = allUsersDf.Weight.astype(float)

"""Saat ini, kolom **Weight** sudah berubah tipe data menjadi *float* dari yang semula *integer*.

# Exploratory Data Analysis (EDA)

## Deskripsi Variabel

### Data Diet
"""

# Informasi dataset diet
allDietsDf.info()

"""1. Diet_type: Tipe diet yang bersangkutan dengan satu baris data.
2. Recipe_name: Nama resep makanan.
3. Cuisine_type: Asal daerah resep makanan.
4. Protein(g): Banyak protein yang terkandung pada masakan dalam satuan *gram*.
5. Carbs(g): Banyak karbohidrat yang terkandung pada masakan dalam satuan *gram*.
6. Fat(g): Banyak lemak yang terkandung pada masakan dalam satuan *gram*.
7. Extraction_day: Tanggal resep dibuat.
8. Extraction_time: Waktu resep dibuat.

Untuk uraian lebih lanjut adalah sebagai berikut:
- Terdapat 5 kolom dengan tipe data object, yaitu Diet_type, Recipe_name, Cuisine_type, Extraction_day, Extraction_time.
- Terdapat 3 kolom dengan tipe data float, yaitu Protein(g), Carbs(g), dan Fat(g).

### Data *Users*
"""

# Informasi dataset users
allUsersDf.info()

"""1. Id: Kolom index
2. BMI (*Body Mass Index*): Indeks masa tubuh ideal (target)
3. Gender: Jenis Kelamin
4. Age: Umur
5. Height: Tinggi badan (inch)
6. Weight: Berat badan (kg)
7. family_history_with_overweight: Riwayat keluarga dengan berat badan berlebih (obesitas)
8. FAVC: Frekuensi mengkonsumsi makanan tinggi kalori
9.  FCVC: Frekuensi mengkonsumsi sayur-mayur
10. NCP: Jumlah makan pokok perhari
11. CAEC: Frekuensi makan cemilan
12. SMOKE: Kebiasaan merokok
13. CH2O: Jumlah minum air
14. SCC: Kebiasaan monitoring konsumsi kalori
15. FAF: Frekuensi kegiatan fisik
16. TUE: Waktu penggunaan perangkat (jam)
17. CALC: Frekuensi mengkonsumsi alkohol
18. MTRANS: Kategori transportasi yang digunakan
19. NObeyesdad: Kategori berat badan

Untuk uraian lebih lanjut adalah sebagai berikut:
- Terdapat 14 kolom dengan tipe data object, yaitu Id, Gender, family_history_with_overweight,FAVC,FCVC,CAEC,SMOKE,CH2O,SCC,FAF,TUE,CALC,MTRANS,NObeyesdad
- Terdapat 2 kolom dengan tipe data integer, yaitu Age dan NCP
- Terdapat 3 kolom dengan tipe data float, Height, Weight, dan BMI

## Menghapus Kolom yang Tidak Perlu
### Dataset Diet
"""

allDietsDf = allDietsDf[['Diet_type', 'Recipe_name', 'Cuisine_type', 'Protein(g)', 'Carbs(g)', 'Fat(g)']]

allDietsDf.head()

"""### Dataset *Users*"""

allUsersDf = allUsersDf[['id', 'BMI','Weight',  'Gender', 'Age', 'NObeyesdad', 'family_history_with_overweight']]

allUsersDf.head()

"""## Cek Nilai *Unique* dan *Invalid Value* Kolom Kategorikal
### Data Diet

Diet_type
"""

print('Jumlah nilai unik adalah', allDietsDf.Diet_type.nunique())
print('Uraian nilai unik: \n', allDietsDf.Diet_type.unique())

"""Cuisine_type"""

print('Jumlah nilai unik adalah', allDietsDf.Cuisine_type.nunique())
print('Uraian nilai unik: \n', allDietsDf.Cuisine_type.unique())

"""Kesimpulan yang didapatkan adalah:
- **Tidak ada *invalid value*** pada kolom kategorikal di data diet.

### Data *Users*

Gender
"""

print('Jumlah nilai unik adalah', allUsersDf.Gender.nunique())
print('Uraian nilai unik: \n', allUsersDf.Gender.unique())

"""family_history_with_overweight"""

print('Jumlah nilai unik adalah', allUsersDf.family_history_with_overweight.nunique())
print('Uraian nilai unik: \n', allUsersDf.family_history_with_overweight.unique())

"""NObeyesdad"""

print('Jumlah nilai unik adalah', allUsersDf.NObeyesdad.nunique())
print('Uraian nilai unik: \n', allUsersDf.NObeyesdad.unique())

"""Kesimpulan yang didapatkan adalah:
- **Tidak ada *invalid value*** pada kolom kategorikal di data *users*.

## Cek Invalid Value Kolom Numerik

### Data Diet

Protein(g)
"""

print((allDietsDf['Protein(g)'] <= 0).sum())

"""Carbs(g)"""

print((allDietsDf['Carbs(g)'] <= 0).sum())

"""Fat(g)"""

print((allDietsDf['Fat(g)'] <= 0).sum())

"""Kesimpulan yang didapatkan adalah:
- Terdapat **17** data protein yang nilainya kurang dari 0. Yang perlu dilakukan adalah **menghapus** data-data itu, bertujuan untuk memberikan rekomendasi makanan dengan nilai gizi yang cukup.
- Terdapat **38** data lemak yang nilainya kurang dari 0. Yang perlu dilakukan adalah **mempertahankan** data-data itu, sebab kondisi itu diartikan makanan-makanan itu rendah lemak dan baik untuk dikonsumsi.
"""

'''
Penghapusan nilai protein yang kurang dari
atau sama dengan 0
'''
allDietsDf = allDietsDf[~(allDietsDf['Protein(g)'] <= 0)]

"""Catatan:
Perlu adanya pemeriksaan *outlier* untuk melihat persebaran data agar mengetahui informasi lebih lanjut.

### Data User

BMI
"""

print((allUsersDf['BMI'] <= 0).sum())

"""Weight"""

print((allUsersDf['Weight'] <= 0).sum())

"""Age"""

print((allUsersDf['Age'] <= 0).sum())

"""Kesimpulan yang didapatkan adalah:
- **Tidak ada *invalid value*** pada kolom numerik di data *users*.

Catatan:
Perlu adanya pemeriksaan *outlier* untuk melihat persebaran data agar mengetahui informasi lebih lanjut.

## Cek *Outliers*

### Data Diet

Protein(g)
"""

sns.boxplot(x=allDietsDf['Protein(g)'])
plt.savefig('assets/diet/protein1.png')

"""Carbs(g)"""

sns.boxplot(x=allDietsDf['Carbs(g)'])
plt.savefig('assets/diet/carbs1.png')

"""Fat(g)"""

sns.boxplot(x=allDietsDf['Carbs(g)'])
plt.savefig('assets/diet/fat1.png')

"""Terdapat banyak nilai yang terindikasi *outliers* pada setiap kolom di atas, hal yang perlu dilakukan adalah peninjauan banyak presentase *outliers* tersebut pada total data. Jika memungkinkan akan dihapus.

### Data *Users*

BMI
"""

sns.boxplot(x=allUsersDf['BMI'])
plt.savefig('assets/users/bmi1.png')

"""Weight"""

sns.boxplot(x=allUsersDf['Weight'])
plt.savefig('assets/users/weight1.png')

"""Age"""

sns.boxplot(x=allUsersDf['Age'])
plt.savefig('assets/users/age1.png')

"""Terdapat beberapa kesimpulan sebagai berikut:
- Pada kolom **Weight**, banyak data *outlier* ada 1. Sehingga dapat dihapus.
- Pada kolom **Age**, banyak data *outlier* ada banyak. Sehingga perlu peninjauan banyak presentase *outliers* tersebut pada total data. Jika memungkinkan akan dihapus.

## Penanganan *Outliers*

### Rumus IQR
"""

def iqrFormula(data):
    # Mengambil kuartil 1 dari keseluruhan data
    q1 = data.quantile(0.25)
    # Mengambil kuartil 3 dari keseluruhan data
    q3 = data.quantile(0.75)

    # Mengurangkan antara kuartil 1 dan 3
    iqr = q3 - q1

    # Batas atas
    upper = q3 + 1.5 * iqr

    # Batas bawah
    bottom = q1 - 1.5 * iqr

    # Rumus outliers
    outliers = ((data < bottom) | (data > upper))

    return outliers

"""### Data Diet

Dari hasil kesimpulan di atas, terdapat beberapa langkah yang harus dilakukan.
"""

# Pengecekan shape data diet
allDietsDf.shape

"""Penerapan Rumus IQR"""

numericalDiet = allDietsDf.select_dtypes(include=['float64', 'int64'])

outliers = iqrFormula(numericalDiet)

"""Penghapusan Nilai Outlier"""

cleanedDiets = allDietsDf[~outliers.any(axis=1)]

cleanedDiets.shape

"""### Data *Users*"""

allUsersDf.shape

"""Penerapan Rumus IQR

"""

numericalUsers = allUsersDf.select_dtypes(include=['float64', 'int64'])

outliers = iqrFormula(numericalUsers)

"""Penghapusan Nilai Outliers"""

cleanedUsers = allUsersDf[~outliers.any(axis=1)]

cleanedUsers.shape

"""## Pengecekan Ulang Nilai Outliers

### Data Diet

Protein(g)
"""

sns.boxplot(x=cleanedDiets['Protein(g)'])
plt.savefig('assets/diet/protein2.png')

"""Carbs(g)"""

sns.boxplot(x=cleanedDiets['Carbs(g)'])
plt.savefig('assets/diet/carbs2.png')

"""Fat(g)"""

sns.boxplot(x=cleanedDiets['Fat(g)'])
plt.savefig('assets/diet/fat2.png')

"""Dari hasil cek di atas, masih terdapat beberapa nilai *outliers* di semua kolom. Maka perlu dilakukan penghapusan ulang.

### Data *Users*

BMI
"""

sns.boxplot(x=cleanedUsers['BMI'])
plt.savefig('assets/users/bmi2.png')

"""Weight

"""

sns.boxplot(x=cleanedUsers['Weight'])
plt.savefig('assets/users/weight2.png')

"""Age"""

sns.boxplot(x=cleanedUsers['Age'])
plt.savefig('assets/users/age2.png')

"""Dari hasil di atas, sudah tidak terdapat nilai *outlier* pada setiap kolom dataset *users*. Maka data di atas sudah dapat digunakan untuk tahap selanjutnya.

## Penanganan Nilai *Outliers* Dataset Diet
Dari hasil pengulangan penerapan IQR yang sudah dilakukan, ternyata terdapat iterasi pengulangan tertentu yang dilakukan. Setelah kode di bawah, sudah tidak terdapat nilai *outliers* lagi pada dataset diet.
"""

cleanedDiets.shape

"""Penerapan Rumus IQR dan Penghapusan Nilai *Outliers*"""

iteration = 8
for i in range(0,iteration):
    numericalDiet = cleanedDiets.select_dtypes(include=['float64', 'int64'])
    outliers = iqrFormula(numericalDiet)
    cleanedDiets = cleanedDiets[~outliers.any(axis=1)]

cleanedDiets.shape

"""## Pengecekan Ulang Nilai *Outliers* Dataset Diet

Protein(g)
"""

sns.boxplot(x=cleanedDiets['Protein(g)'])
plt.savefig('assets/diet/protein3.png')

"""Carbs(g)"""

sns.boxplot(x=cleanedDiets['Carbs(g)'])
plt.savefig('assets/diet/carbs3.png')

"""Fat(g)"""

sns.boxplot(x=cleanedDiets['Fat(g)'])
plt.savefig('assets/diet/fat3.png')

"""Setelah melakukan **8** iterasi penerapan rumus IQR, terlihat bahwa sudah tidak terdapat nilai *outlier* dan data dapat digunakan pada tahap selanjutnya.

## Univariate Analysis
### Data Diet
"""

cleanedDiets.head()

"""Memisahkan Kategori Kolom"""

# Kolom Kategorikal
catDietFeatures = ['Diet_type', 'Cuisine_type']

"""Kolom **Recipe_name** tidak dilakukan analisis univarian sebab data *unique*-nya yang terlalu banyak.

1. Olah Categorical Features

    Buat Fungsi User-Defined
"""

def featuresExtractDiet(feature, data=cleanedDiets):
    if feature == 'Cuisine_type':
        count = data[feature].value_counts()
        percent = 100 * data[feature].value_counts(normalize=True)

        # Mengambil indeks yang akan dijumlahkan menjadi kategori "others"
        othersCount = count.iloc[4:].values
        othersPercent = percent.iloc[4:].values

        # Menghapus nilai sebelum dijadikan kategori "others"
        count = count.drop(count.index[4:])
        percent = percent.drop(percent.index[4:])

        # Menambahkan kategori "others" menjadi data baru
        othersCount = pd.Series(othersCount.sum(), index=['others'])
        othersPercent = pd.Series(othersPercent.sum(), index=['others'])

        count = pd.concat([count, othersCount])
        percent = pd.concat([percent, othersPercent])

        df = pd.DataFrame({
            'Jumlah sampel':count,
            'Persentase':percent.round(1)
        })
        print(df)

        plt.figure(figsize=(8, 8))
        percent.plot(kind='pie', autopct='%1.1f%%' ,title='Jumlah Presentase ' + feature)

    elif feature == 'Diet_type':
        count = data[feature].value_counts()
        percent = 100 * data[feature].value_counts(normalize=True)
        df = pd.DataFrame({
            'Jumlah sampel':count,
            'Persentase':percent.round(1)
            })
        print(df)

        count.plot(kind='bar', title='Jumlah Kolom ' + feature, rot=0)

"""Kolom Diet_type"""

feature = catDietFeatures[0]
featuresExtractDiet(feature)
plt.savefig('assets/diet/uni-diet-type.png')

"""Kolom Cuisine_type"""

feature = catDietFeatures[1]
featuresExtractDiet(feature)
plt.savefig('assets/diet/uni-cuisine-type.png')

"""2. Olah Numerical Features"""

cleanedDiets.sample(5)

cleanedDiets.hist(bins=35, figsize=(13,10))
plt.savefig('assets/diet/uni-numerical.png')
plt.show()

"""Dari hasil pemetaan kolom numerik di atas, dapat disimpulkan bahwa:

1. Kolom Protein(g)
   - Persebaran data cenderung ke kanan (*Right-Skewed*)
   - Banyak data terbanyak ada di angka 10
   - Banyak data terendah ada di kisaran angka 150 - 175

2. Kolom Carbs(g)
   - Persebaran data cenderung ke kanan (*Right-Skewed*)
   - Banyak data terbanyak ada di angka 20
   - Banyak data terendah ada di kisaran angka 300 - 350

3. Kolom Fat(g)
   - Persebaran data cenderung ke kanan (*Right-Skewed*)
   - Banyak data terbanyak ada di angka 10
   - Banyak data terendah ada di kisaran angka 200 - 250

### Data *Users*
"""

cleanedUsers.head()

"""Memisahkan Kategori Kolom

"""

# Kolom Kategorikal
catUsersFeatures = ['Gender', 'NObeyesdad', 'family_history_with_overweight']

"""1. Olah Categorical Features"""

def featuresExtractDiet(feature, data=cleanedUsers):

    count = data[feature].value_counts()
    percent = 100 * data[feature].value_counts(normalize=True)
    df = pd.DataFrame({
        'Jumlah sampel':count,
        'Persentase':percent.round(1)
    })
    print(df)

    rot = 0
    if feature == 'NObeyesdad':
        rot=45
    count.plot(kind='bar', title='Jumlah Kolom ' + feature, rot=rot)

"""Kolom Gender"""

feature = catUsersFeatures[0]
featuresExtractDiet(feature)
plt.savefig('assets/users/uni-gender.png')

"""Kolom NObeyesdad"""

feature = catUsersFeatures[1]
featuresExtractDiet(feature)
plt.savefig('assets/users/uni-nobeyesdad.png')

"""Kolom family_history_with_overweight"""

feature = catUsersFeatures[2]
featuresExtractDiet(feature)
plt.savefig('assets/users/uni-family.png')

"""2. Olah Numerical Features"""

cleanedUsers.hist(bins=35, figsize=(13,10))
plt.savefig('assets/users/uni-numerical.png')
plt.show()

"""Dari hasil pemetaan kolom numerik di atas, dapat disimpulkan bahwa:
1. Kolom BMI
   - Pada kolom BMI persebaran banyak data cenderung rata. Dengan perolehan banyak data terbanyak ada di kisaran angka 18.
    - Banyak BMI terendah ada di angka 50.
2. Kolom Weight
   - Pada kolom Weight persebaran banyak data cenderung miring ke kanan (*right-skewed*). Dengan perolehan banyak data terbanyak ada di kisaran angka 50 dan 80.
    - Banyak angka terendah ada di kisaran angka 140 - 160.
3. Kolom Age
   - Pada kolom Age persebaran banyak data cenderung miring ke kanan (*right-skewed*).
   - Banyak data terbanyak ada pada angka 21.
   - Banyak data terendah ada di kisaran angka 28 - 35.

# Data Preparation

## Pengecekan dan Penyimpulan *Missing Value* Ulang

### Data Diet
"""

cleanedDiets.isnull().sum()

"""### Data *Users*"""

cleanedUsers.isnull().sum()

"""Dari hasil inspeksi lanjutan di atas, sudah tidak ada data *null* yang terkandung di dalam kedua dataset meskipun telah melalui banyak langkah pemrosesan. Dapat disimpulkan bahwa data sudah baik.

## Mengurutkan Data Berdasarkan Kategori Tertentu

### Data Diet

Pengurutan dilakukan pada nilai kategori diet dan tipe masakan.
"""

fixDiet = cleanedDiets.sort_values(['Diet_type', 'Cuisine_type'], ascending=True)

fixDiet.head()

"""Saat ini data sudah diurutkan berdasarkan kedua fitur tersebut.

### Data *Users*

Data diurutkan berdasarkan tipe berat badan.
"""

fixUsers = cleanedUsers.sort_values('NObeyesdad', ascending=True)

fixUsers.head()

"""Saat ini data sudah diurutkan berdasarkan jenis berat badan.

## Pengecekan dan Penyimpulan Data Duplikat Ulang

Setelah dilakukan pengurutan, perlu memastikan bahwa data yang diloloskan harus merupakan data unik

### Data Diet

Pengecekan data duplikat dilakukan pada fitur resep makanan
"""

fixDiet.shape

fixDiet['Recipe_name'].duplicated().sum()

"""Terlihat ada data duplikat yang ada didalam dataset diet. Selanjutnya adalah melakukan proses penghapusan data duplikat pada data resep makanan."""

fixDiet = fixDiet.drop_duplicates('Recipe_name')

fixDiet.shape

"""Setelah dilakukan penghapusan data duplikat, banyak baris data menjadi berkurang. Tetapi masih cukup untuk dilakukan *modeling*.

### Data User

Pengecekan data duplikat dilakukan pada fitur ID
"""

fixUsers.shape

fixUsers['id'].duplicated().sum()

"""Setelah dilakukan pengecekan data duplikat pada fitur **id**, terlihat sudah tidak ada data duplikat disana. Maka tidak perlu dilakukan proses penghapusan data duplikat.

## Rekonstruksi Urutan Kolom

Yang dilakukan pada tahap ini adalah mengubah urutan kolom pada setiap dataset menjadi lebih mudah dilihat, dan mengubah penamaan yang tidak konsisten agar lebih rapi. Selain itu, juga membuat sebuah fitur baru yang merupakan hasil penggabungan fitur-fitur penting agar dapat dilakukan proses rekomendasi. Dan juga menambahkan nilai ID pada setiap data tipe diet dan detailnya.

### Data Diet
"""

# id
idDiet = range(1, fixDiet.shape[0] + 1)

# Tipe Diet
dietName = fixDiet['Diet_type'].tolist()

# Nama Resep
recipeName = fixDiet['Recipe_name'].tolist()
# Jenis Masakan
cuisineType = fixDiet['Cuisine_type'].tolist()

# Kadar Protein
protein = fixDiet['Protein(g)'].tolist()

# Kadar Karbohidrat
carbs = fixDiet['Carbs(g)'].tolist()

# Kadar Lemak
fat = fixDiet['Fat(g)'].tolist()

# Gabungan Fitur Diet, Nama Resep, dan Jenis Masakan
mixedFeature = fixDiet['Diet_type'] + ' ' + fixDiet['Recipe_name'] + ' ' + fixDiet['Cuisine_type']

dietDf = pd.DataFrame({
    'id_diet': idDiet,
    'tipe_diet': dietName,
    'tipe_masakan': cuisineType,
    'resep_masakan': recipeName,
    'kadar_protein': protein,
    'kadar_karbo': carbs,
    'kadar_lemak': fat,
    'fitur_tfidf': mixedFeature
})

dietDf.head()

"""### Data *Users*"""

# id
idUser = fixUsers['id'].tolist()

# Jumlah BMI
bmi = fixUsers['BMI'].tolist()

# Berat Badan
weight = fixUsers['Weight'].tolist()

# Jenis Kelamin
gender = fixUsers['Gender'].tolist()

# Usia
age = fixUsers['Age'].tolist()

# Tipe Obesitas
obesityType = fixUsers['NObeyesdad'].tolist()

# Riwayat Keluarga Obesitas
historyFam = fixUsers['family_history_with_overweight'].tolist()

userDf = pd.DataFrame({
    'id_user': idUser,
    'jenis_kelamin': gender,
    'usia': age,
    'tipe_berat_badan': obesityType,
    'BMI': bmi,
    'berat_badan': weight,
    'keturunan_obesitas': historyFam
})

userDf.head()

"""# Model Development

## Content-based Filtering

Pada tahap *model development* pada **Content-based Filtering** ini, akan dilakukan pemodelan sistem rekomendasi berdasarkan jenis atau tipe diet  beserta jenis masakannya. Maka dari itu, data yang digunakan adalah **data diet**. Hal-hal yang perlu dipersiapkan adalah sebagai berikut:

### TF-IDF Vectorizer

Penerapan fungsi ini ditujukan untuk mencari nilai vektor sebagai representasi fitur yang digunakan, yaitu fitur **fitur_tfidf**.

Perhitungan IDF Pada Nilai *Unique*
"""

# Pemanggilan TFIDF
tfidf = TfidfVectorizer()

# Pengambilan nilai unique dari data
uniqueValues = dietDf['fitur_tfidf'].unique()

# Pengubahan nilai dalam bentuk matriks
tfidfMatrix = tfidf.fit_transform(uniqueValues)

"""### Pembuatan Fungsi Rekomendasi"""

def getRecommendationsContent(dietType, cuType, n=5):
    # Penggabungan kedua input teks
    inputText = f'{dietType} {cuType}'

    # Pengubahan input teks menjadi vektor
    inputTfidf = tfidf.transform([inputText])

    # Pencarian Nilai Similarity dari inputan
    simScores = cosine_similarity(inputTfidf, tfidfMatrix).flatten()

    # Mengurutkan skor similaritas dari tertinggi ke terendah
    sortedScores = simScores.argsort()[::-1]

    # Mengambil top n indeks similar
    top5Index = sortedScores[:n]

    # Mengambil data dari data asli dengan indeks yang didapatkan
    top5Recommend = dietDf.iloc[top5Index].copy()

    # Menghapus Kolom fitur_tfidf
    top5Recommend = top5Recommend.drop('fitur_tfidf', axis=1)

    return top5Recommend

"""### Mendapatkan Rekomendasi"""

getRecommendationsContent('dash', 'american')

"""## User-based Filtering (Collaborative Filtering)

Model ini akan melibatkan data *users* yang sudah tersedia sebelumnya. Pada Algoritma ini akan menambahkan sistem rekomendasi ***Content-based Filtering*** yang mengarahkannya menjadi ***Collaborative Filtering***.

### Membuat Preferensi *Rating*

Pembuatan preferensi *rating* dilakukan dengan menyebarkan seluruh ID *users* secara acak ke setiap tipe diet, lalu dilakukan penghitungan dari setiap tipe diet.

**Mengambil Data *User* Selain yang Kekurangan Berat Badan**
"""

# Ambil tipe berat badan selain yang kekurangan berat badan
userNeedsDiet = userDf[userDf['tipe_berat_badan'] != 'insufficient_weight']

userNeedsDiet.tipe_berat_badan.unique()

"""**Mengambil Data Setiap Tipe Berat Badan**"""

# Normal
obesNormal = userNeedsDiet[userNeedsDiet['tipe_berat_badan'] == 'normal_weight']
print(len(obesNormal))

# Obesitas Tipe 1
obesType1 = userNeedsDiet[userNeedsDiet['tipe_berat_badan'] == 'obesity_type_i']
print(len(obesType1))

# Obesitas Tipe 2
obesType2 = userNeedsDiet[userNeedsDiet['tipe_berat_badan'] == 'obesity_type_ii']
print(len(obesType2))

# Obesitas Tipe 3
obesType3 = userNeedsDiet[userNeedsDiet['tipe_berat_badan'] == 'obesity_type_iii']
print(len(obesType3))

# Kelebihan Berat Badan 1
overweight1 = userNeedsDiet[userNeedsDiet['tipe_berat_badan'] == 'overweight_level_i']
print(len(overweight1))

# Kelebihan Berat Badan 2
overweight2 = userNeedsDiet[userNeedsDiet['tipe_berat_badan'] == 'overweight_level_ii']
print(len(overweight2))

# Mengambil data 20 persen dari setiap kategori
# Fungsi mengambil 20 persen dari total data
def get20percent(df):
    df = df.sample(frac=0.2, random_state=42)

    return df

# Normal
obesNormal = get20percent(obesNormal)
print(len(obesNormal))

# Obesitas Tipe 1
obesType1 = get20percent(obesType1)
print(len(obesType1))

# Obesitas Tipe 2
obesType2 = get20percent(obesType2)
print(len(obesType2))

# Obesitas Tipe 3
obesType3 = get20percent(obesType3)
print(len(obesType3))

# Kelebihan Berat Badan 1
overweight1 = get20percent(overweight1)
print(len(overweight1))

# Kelebihan Berat Badan 2
overweight2 = get20percent(overweight2)
print(len(overweight2))

# Menggabungkan seluruh data
userNeedsDiet = pd.concat([obesNormal, obesType1, obesType2, obesType3, overweight1, overweight2])
userNeedsDiet.shape

"""**Menyebarkan ID *Users* ke Data Diet**"""

# Menyalin data diet asli
dietWithUser = dietDf.copy()

# Mengambil nilai unik id user
uniqueId = userNeedsDiet['id_user'].unique()

# Menambahkan Kolom Id User
dietWithUser['id_user'] = np.tile(uniqueId, len(dietWithUser) // len(uniqueId) + 1)[:len(dietWithUser)]

"""**Membuat Data Rating**"""

# Skala Rating
ratingScale = [i for i in range(1, 5+1)]

for i, row in dietWithUser.iterrows():
    # Ambil rating random
    rating = np.random.choice(ratingScale)

    # Penambahan rating
    dietWithUser.at[i, 'rating'] = rating

dietWithUser.head()

len(dietWithUser.id_user.unique())

"""**Menambahkan Tipe Berat Badan**

Penambahan tipe kategori menjadi nilai x untuk di *training*
"""

dietWithUser = pd.merge(dietWithUser, userNeedsDiet[['id_user','tipe_berat_badan']], left_on='id_user',right_on='id_user', how='left')

dietWithUser.sample(5)

"""**Encoding Fitur Kategorikal**"""

# Tipe Diet
# Ambil data unik tipe diet
dietTypes = dietWithUser['tipe_diet'].unique().tolist()
# Proses encoding
dietToEncoded = {x: i for i, x in enumerate(dietTypes)}

# Menerapkan Encoding
# Tipe Diet
dietWithUser['tipe_diet'] = dietWithUser['tipe_diet'].map(dietToEncoded)

dietWithUser.head()

"""**Cek Informasi Dataset Saat Ini**"""

dietWithUser.info()

"""Terlihat pada kolom *id_user*, tipe data masih dalam bentuk *object*. Maka perlu diubah menjadi integer terlebih dahulu. Dan juga menghapus simbol koma sebagai gambaran angka id ribuan."""

dietWithUser['id_user'] = dietWithUser['id_user'].str.replace(',', '').astype(int)

"""### Membagi Data untuk Training dan Validation

**Mengacak Data**
"""

dietWithUser = dietWithUser.sample(frac=1, random_state=40)
dietWithUser.head()

"""**Membagi Data**"""

# Nilai minimum dari keseluruhan rating
minRating = dietWithUser['rating'].min()
# Nilai maksimum dari keseluruhan rating
maxRating = dietWithUser['rating'].max()

# Ambil data x
x = dietWithUser[['tipe_diet', 'id_user']]

# Ambil data y
y = dietWithUser['rating']

# Indeks banyak data training
trainIndex = int(0.8 * dietWithUser.shape[0])

# Pembagian data training dan validasi
xTrain, xVal, yTrain, yVal = (
    x[:trainIndex],
    x[trainIndex:],
    y[:trainIndex],
    y[trainIndex:]
)

print(x, y)

"""### Proses Training"""

# Ambil banyak idDiet
numIdDiet = len(dietWithUser['tipe_diet']) + 1
# Ambil banyak tipe berat badan
numWeight = len(dietWithUser['id_user']) + 1

# arsitektur diet
idDiet_input = layers.Input(shape=(1,), name="idDiet_Input")
idDiet_embedding = layers.Embedding(numIdDiet, 16, embeddings_initializer="he_normal",
            embeddings_regularizer=tf.keras.regularizers.l2(1e-6), name="idDiet_Embeded")(idDiet_input)
idDiet_vector = layers.Flatten(name="Flatten_idDiet")(idDiet_embedding)

# Arsitektur tipe berat badan
weight_input = layers.Input(shape=(1,), name="weight_Input")
weight_embedding = layers.Embedding(numWeight, 16, embeddings_initializer="he_normal",
            embeddings_regularizer=tf.keras.regularizers.l2(1e-6), name="weight_Embeded")(weight_input)
weight_vector = layers.Flatten(name="Flatten_weight")(weight_embedding)

# Dot Product
prod = layers.Dot(name='Dot_Product', axes=1)([idDiet_vector, weight_vector])

# Dense
dense = layers.Dense(1, activation='relu')(prod)

# Inisiasi Model
model = Model([idDiet_input, weight_input], dense)
model.summary()

# Compile Model
model.compile(
    loss='mean_squared_error',
    optimizer=tf.keras.optimizers.Adam(learning_rate=1e-3),
    metrics=['mean_squared_error']
)

# Train Model
history = model.fit(
    x=[xTrain['tipe_diet'], xTrain['id_user']],
    y=yTrain,
    batch_size=8,
    epochs=10,
    validation_data=([xVal['tipe_diet'], xVal['id_user']], yVal)
)

"""### Mendapatkan Rekomendasi Tipe Diet Berdasarkan Data Pengguna"""

# Ambil sample tipe diet
userId = dietWithUser.id_user.sample(1).iloc[0]

# Ambil sample tipe berat badan
chosenDietByUser = dietWithUser[dietWithUser.id_user == userId]

# Ambil data tipe diet yang belum pernah digunakan
dietUnchoosenByUser = dietDf[~dietDf['tipe_diet'].isin(chosenDietByUser.tipe_diet.values)]['tipe_diet']

# Ambil data id user yang serupa sebanyak data tipe diet
userIdForPredict = np.array([userId] * len(dietUnchoosenByUser))

# Gunakan map untuk mendapatkan encoded values dari dietUnchoosenByUser
dietUnchoosenByUserEncoded = dietUnchoosenByUser.map(dietToEncoded).values

# Prediksi rating menggunakan model
ratings = model.predict([dietUnchoosenByUserEncoded, userIdForPredict])

# Mendapatkan indeks rating teratas
topRatingsIndices = np.argsort(ratings.flatten())[::-1]

# Mengambil top 5 indeks
top5Indices = topRatingsIndices[:5]

"""### Menyajikan Hasil Rekomendasi"""

recommendedDietDf = dietDf[dietDf['id_diet'].isin(top5Indices)]
recommendedDietDf.drop('fitur_tfidf', axis=1, inplace=True)
recommendedDietDf

"""### Evaluasi Metriks"""

# Evaluasi Model
evaluation = model.evaluate([xVal['tipe_diet'], xVal['id_user']], yVal, batch_size=8)

# Tampilkan Nilai Loss
print(f'Loss: {evaluation[0]}')

# Tampilkan Metrik Evaluasi Tambahan
for i, metric_name in enumerate(model.metrics_names[1:]):  # Mulai dari indeks 1 karena indeks 0 adalah loss
    print(f'{metric_name}: {evaluation[i + 1]}')

import matplotlib.pyplot as plt

# Plot training & validation loss values
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.savefig('assets/model-loss.png')
plt.show()

# Plot training & validation mean squared error values
plt.plot(history.history['mean_squared_error'])
plt.plot(history.history['val_mean_squared_error'])
plt.title('Mean Squared Error')
plt.xlabel('Epoch')
plt.ylabel('Mean Squared Error')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.savefig('assets/mse.png')
plt.show()